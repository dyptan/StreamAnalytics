# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Build with Maven
      run: mvn -B package --file pom.xml
      
    - name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
      
    - name: Upload web artifact
      uses: actions/upload-artifact@v2
      with:
        name: web
        path: web/target/web*
    - name: Upload trainer artifact
      uses: actions/upload-artifact@v2
      with:
        name: trainer
        path: trainer/target/dist/
    - name: Upload streaming artifact
      uses: actions/upload-artifact@v2
      with:
        name: streamer
        path: streamer/target/dist
        
  deploy:  
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
         java-version: 1.8
       
#       - name: Login to DockerHub Registr
#         run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
      
      - name: Download web artifact
        uses: actions/download-artifact@v2
        with:
         name: web
         path: web/target/dist
      - name: checking files
        run: ls web/target/dist
#       - name: Build the tagged Web image
#         run: docker build web --file web/DockerfileAction --tag diptan/web:latest
#         working-directory: ./dist
#       - name: Push the tagged Web image
#         run: docker push diptan/web:latest
        
#       - name: Download trainer artifact
#         uses: actions/download-artifact@v2
#         with:
#          name: trainer
#          path: /
#       - name: Build the latest Trainer image
#         run: docker build trainer --file trainer/DockerfileAction --tag diptan/trainer:latest
#       - name: Push the latest TRainer image
#         run: docker push diptan/trainer:latest

#       - name: Download streaming artifact
#         uses: actions/download-artifact@v2
#         with:
#           name: streamer
#           path: /
#       - name: Build the latest Streamer image
#         run: docker build streamer --file streamer/DockerfileAction --tag diptan/streamer:latest
#       - name: Push the latest Streamer image
#         run: docker push diptan/streamer:latest
        
      - name: Build and push Docker images
        # You may pin to the exact commit or the version.
        # uses: docker/build-push-action@ab83648e2e224cfeeab899e23b639660765c3a89
        uses: docker/build-push-action@v1.1.1
        with:
          # Username used to log in to a Docker registry. If not set then no login will occur
          username: diptan
          # Password or personal access token used to log in to a Docker registry. If not set then no login will occur
          password: ${{ secrets.DOCKER_PASSWORD }}
          tags: diptan/web:latest
           #  Automatically tags the built image with the git reference as per the readme
          # Docker repository to tag the image with
#           repository: web
          # Comma-delimited list of tags. These will be added to the registry/repository to form the image's tags
          path: web
          # Path to the Dockerfile (Default is '{path}/Dockerfile')
          dockerfile: Dockerfile
          # Sets the target stage to build

