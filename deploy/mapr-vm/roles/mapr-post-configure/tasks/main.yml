---

  - name: Wait for CLDB port
    wait_for: host={{ my_ip }} port=7222
    when: (packages_core.cldb.host|first_host) == hostname

  - name: Wait for CLDB
    command: cat /opt/mapr/logs/cldb.log
    register: log_output
    until: log_output.stdout.find("CLDB can become a read write copy now") > -1
    retries: 50
    delay: 10
    when: (packages_core.cldb.host|first_host) == hostname

  - name: Set 755 to /home/mapr
    file: path=/home/mapr mode=0755
    ignore_errors: true

  - name: Maprlogin kerberos
    shell: "/home/mapr/maprlogin_kerberos.sh"
    become: yes
    become_user: mapr
    when: security == "kerberos"

  - name: Maprlogin password
    shell: "maprlogin password -user mapr <<< mapr"
    args:
        executable: /bin/bash
    become: yes
    become_user: mapr
    when: security == "maprsasl"


  - name: Create Spark directory (/apps/spark) in MapR-FS
    command: "hadoop fs -mkdir -p /apps/spark"
    become: true
    become_user: mapr
    ignore_errors: true
    when: (packages_core.cldb.host|first_host) == hostname

  - name: Change permission /apps/spark to 777
    command: "hadoop fs -chmod 777 /apps/spark"
    become: true
    become_user: mapr
    ignore_errors: true
    when: (packages_core.cldb.host|first_host) == hostname

  - name: Create Hive warehouse directory (/user/hive/warehouse) in MapR-FS
    command: "hadoop fs -mkdir -p /user/hive/warehouse"
    become: true
    become_user: mapr
    ignore_errors: true
    when: (packages_core.cldb.host|first_host) == hostname

  - name: Change permission /user/hive/warehouse to 777
    command: "hadoop fs -chmod 777 /user/hive/warehouse"
    become: true
    become_user: mapr
    ignore_errors: true
    when: (packages_core.cldb.host|first_host) == hostname


  - name: Find Tez dir
    shell: "ls -d /opt/mapr/tez/tez-*"
    register: tez_dir
    when: (packages_eco.tez.host|first_host) == hostname

  - name: Create Tez directory (/apps/tez) in MapR-FS
    command: "hadoop fs -mkdir -p /apps/tez"
    become: true
    become_user: mapr
    ignore_errors: true
    when: (packages_eco.tez.host|first_host) == hostname

  - name: Change permission /apps/tez to 755
    command: "hadoop fs -chmod 755 /apps/tez"
    become: true
    become_user: mapr
    ignore_errors: true
    when: (packages_eco.tez.host|first_host) == hostname

  - name: Upload Tez libraries to the MapR-FS
    command: "hadoop fs -put {{ tez_dir.stdout }} /apps/tez"
    become: true
    become_user: mapr
    ignore_errors: true
    when: (packages_eco.tez.host|first_host) == hostname


  - name: Change owner to mapr:mapr
    file: path={{item}} owner=mapr group=mapr state=directory recurse=yes
    with_items:
      - "/opt/mapr/hbase"
      - "/opt/mapr/hive"
      - "/opt/mapr/hue"
      - "/opt/mapr/hue-livy"
      - "/opt/mapr/kafka"
      - "/opt/mapr/httpfs"
      - "/opt/mapr/oozie"
      - "/opt/mapr/pig"
      - "/opt/mapr/spark"
      - "/opt/mapr/storm"
      - "/opt/mapr/sqoop"
      - "/opt/mapr/impala"
      - "/opt/mapr/sentry"
      - "/opt/mapr/flume"
      - "/opt/mapr/drill"
      - "/opt/mapr/mahout"
      - "/opt/mapr/tez"
      - "/opt/mapr/schema-registry"
    ignore_errors: true

  - name: Add .bash_aliases import
    blockinfile:
      dest: /home/mapr/.bashrc
      block: |
        # Alias definitions.
        # You may want to put all your additions into a separate file like
        # ~/.bash_aliases, instead of adding them here directly.
        # See /usr/share/doc/bash-doc/examples in the bash-doc package.

        if [ -f ~/.bash_aliases ]; then
          . ~/.bash_aliases
        fi
      marker: "#  ANSIBLE MANAGED BLOCK "
      insertafter: EOF

  - template:
      src: templates/bash_aliases
      dest: /home/mapr/.bash_aliases
      owner: mapr
      group: mapr
      mode: "u=rw,g=r,o=r"


  - block:
    - name: Download latest license
      get_url: url={{ license_url }} dest=/tmp/LatestDemoLicense.txt
      ignore_errors: true
    - name: Add the last license
      shell: maprcli license add -license /tmp/LatestDemoLicense.txt -is_file true
      become: yes
      become_user: mapr
      ignore_errors: true
    when: add_license and is_primary

  - name: Run configure.sh -R to configure Ecosystem
    command: /opt/mapr/server/configure.sh -R
    sudo: yes

  - name: Change heapsize percent for warden
    lineinfile: dest=/opt/mapr/conf/warden.conf regexp=service.command.mfs.heapsize.percent line=service.command.mfs.heapsize.percent=5
    sudo: yes

  - name: Restart mapr-warden
    service: name=mapr-warden state=restarted


    ####################################
    ### Create admin role for Sentry ###
    ####################################
  - set_fact: hive_auth_string=";"

  - set_fact: hive_auth_string=";auth=maprsasl;"
    when: security == 'maprsasl'

  - set_fact: hive_auth_string=";principal={{ packages_eco.hiveserver2.host|first_host('_HOST')|pick(fqdns)|mkprinc(mapr_host_principal) }};"
    when: security == 'kerberos'

  - name: Wait for Hive Server port to be able to create admin role in Sentry
    wait_for: host={{ packages_eco.hiveserver2.host|first_host }} port=10000
    when: (hostname == packages_eco.sentry.host|first_host)
          and (packages_eco.hiveserver2.host and packages_eco.sentry.use_for_hive)
    ignore_errors: true

  - name: Create admin role for Sentry (through Hive Beeline)
    command: >
               hive --service beeline
               -u 'jdbc:hive2://{{ packages_eco.hiveserver2.host|first_host }}:10000/default;{{ hive_auth_string }}'
               -n mapr -p mapr
               -e 'create role admin_role; grant all on server HS2 to role admin_role; grant role admin_role to group mapr;'
    become: true
    become_user: mapr
    when: (hostname == packages_eco.sentry.host|first_host)
          and (packages_eco.hiveserver2.host and packages_eco.sentry.use_for_hive)
    ignore_errors: true


  - set_fact: impala_auth_arg="-u mapr"

  - set_fact: impala_auth_arg="-ks mapr"
    when: security == 'kerberos'

  - name: Wait for Impala port to be able to create admin role in Sentry
    wait_for: host={{ packages_eco.impala_server.host|first_host }} port=21050
    when: (hostname == packages_eco.sentry.host|first_host)
          and (packages_eco.impala_server.host and packages_eco.sentry.use_for_impala)
          and not (packages_eco.hiveserver2.host and packages_eco.sentry.use_for_hive)
    ignore_errors: true

  - name: Create admin role for Sentry (through Impala Shell)
    command: impala-shell {{ impala_auth_arg }} -q 'create role admin_role; grant all on server HS2 to role admin_role; grant role admin_role to group mapr;'
    become: true
    become_user: mapr
    when: (hostname == packages_eco.sentry.host|first_host)
          and (packages_eco.impala_server.host and packages_eco.sentry.use_for_impala)
          and not (packages_eco.hiveserver2.host and packages_eco.sentry.use_for_hive)
    ignore_errors: true

  - name: Spark post configure
    include: spark/main.yml
    when: hostname in packages_eco.spark.host
