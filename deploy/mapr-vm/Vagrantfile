# -*- mode: ruby -*-
# vim: ft=ruby

load "./config.rb"

if File.exist?("./overrides.rb")
  load "./overrides.rb"
end

require 'erb'
require 'ipaddr'

###################################
# Modify constants below ONLY when you know what you are doing
###################################

# Default boxes
BOXES = {
  'centos68' => {
    'libvirt' => 'centos-6-8-x64-libvirt.box',
    'virtualbox' => 'centos-6-8-x64-virtualbox.box',
  },
  'centos72' => {
    'libvirt' => 'centos-7-2-x64-libvirt.box',
    'virtualbox' => 'centos-7-2-x64-virtualbox.box',
  },
  'centos73' => {
    'libvirt' => 'centos-7-3-x64-libvirt.box',
    'virtualbox' => 'centos-7-3-x64-virtualbox.box',
  },
  'centos76' => {
    'libvirt' => 'centos-7-6-x64-libvirt.box',
    'virtualbox' => 'centos-7-6-x64-virtualbox.box',
  },
  'centos77' => {
    'libvirt' => 'centos-7-7-x64-libvirt.box',
    'virtualbox' => 'centos-7-7-x64-virtualbox.box',
  },
  'centos78' => {
    'libvirt' => 'centos-7-8-x64-libvirt.box',
    'virtualbox' => 'centos-7-8-x64-virtualbox.box',
  },
  'centos81' => {
    'libvirt' => 'centos-8-1-x64-libvirt.box',
    'virtualbox' => 'centos-8-1-x64-virtualbox.box',
  },
  'centos68vault' => {
    'libvirt' => 'centos-6-8-vault-x64-libvirt.box',
    'virtualbox' => 'centos-6-8-vault-x64-virtualbox.box',
  },
  'centos72vault' => {
    'libvirt' => 'centos-7-2-vault-x64-libvirt.box',
    'virtualbox' => 'centos-7-2-vault-x64-virtualbox.box',
  },
  'centos73vault' => {
    'libvirt' => 'centos-7-3-vault-x64-libvirt.box',
    'virtualbox' => 'centos-7-3-vault-x64-virtualbox.box',
  },
  'ubuntu1404' => {
    'libvirt' => 'ubuntu-14-04-x64-libvirt.box',
    'virtualbox' => 'ubuntu-14-04-x64-virtualbox.box',
  },
  'ubuntu1604' => {
    'libvirt' => 'ubuntu-16-04-x64-libvirt.box',
    'virtualbox' => 'ubuntu-16-04-x64-virtualbox.box',
  },
  'ubuntu1804' => {
    'libvirt' => 'ubuntu-18-04-x64-libvirt.box',
    'virtualbox' => 'ubuntu-18-04-x64-virtualbox.box',
  },
  'suse121' => {
    'libvirt' => 'suse-12-1-x64-libvirt.box',
    'virtualbox' => 'suse-12-1-x64-virtualbox.box',
  },
  'suse122' => {
    'libvirt' => 'suse-12-2-x64-libvirt.box',
    'virtualbox' => 'suse-12-2-x64-virtualbox.box',
  },
  'suse124' => {
    'libvirt' => 'suse-12-4-x64-libvirt.box',
    'virtualbox' => 'suse-12-4-x64-virtualbox.box',
  },
  'suse125' => {
    'libvirt' => 'suse-12-5-x64-libvirt.box',
    'virtualbox' => 'suse-12-5-x64-virtualbox.box',
  },
  'suse151' => {
    'libvirt' => 'suse-15-1-x64-libvirt.box',
    'virtualbox' => 'suse-15-1-x64-virtualbox.box',
  },
  'opensuse422' => {
    'libvirt' => 'opensuse-42-2-x64-libvirt.box',
    'virtualbox' => 'opensuse-42-2-x64-virtualbox.box',
  },
}
BOXES_BASE_URL = 'http://repo.mapr/repo/box/20180201/'
#BOXES_BASE_URL = 'file:///root/boxes/'

if not BOXES.has_key?(OS)
  puts 'Please, choose valid OS', 'Possible VMLAB_OS values:'
  BOXES.keys.each do |key|
    puts ' - ' + key
  end
  puts 'Vagrant stopped.'
  exit 1
end


default_interface = nil
if DEFAULT_INTERFACE_MANUAL.nil?
  if Vagrant::Util::Platform.windows?
    output_ = `wmic NICCONFIG get DefaultIPGateway,Description`
    output_.split("\n").each do |line_|
      if not line_.index('}').nil?
        default_interface = line_[line_.index('}')+1..-1].strip
        break
      end
    end
  elsif Vagrant::Util::Platform.linux?
    default_interface = `ip route | sed -n -e 's/^default.* dev \\(\\w*\\).*$/\\1/p'`
  elsif Vagrant::Util::Platform.darwin?
    default_interface = "en0"
  else
    puts 'Unknown OS. Exiting...'
    exit 1
  end
else
  default_interface = DEFAULT_INTERFACE_MANUAL
end
DEFAULT_INTERFACE = default_interface.strip
if DEFAULT_INTERFACE.nil? or DEFAULT_INTERFACE.empty?
  puts 'Can\'t find default network interface name. Please, set constant DEFAULT_INTERFACE_MANUAL to appropriate value.'
  exit 1
end

NODES = INSTANCES.map.with_index(1) do |node, index|
  _re = /%\{(.*?)\}/

  node[:index] = index
  
  node[:ram] = node[:values][0]
  node[:cpu] = node[:values][1]
  node[:playbook] = node[:values][2]

  node[:net_type] = NETWORK_TYPE

  netip, netmask = NETWORK_IP.split('/')
  node[:ip] = netip.gsub(_re) { |m| eval($1).to_s }
  node[:netmask] = IPAddr.new('255.255.255.255').mask(netmask).to_s

  node[:fqdn] = NETWORK_HOST.gsub(_re) { |m| eval($1).to_s }
  node[:name] = node[:fqdn].split('.')[0]

  node[:mac] = NETWORK_MAC.gsub(_re) { |m| eval($1).to_s }

  node[:vbox_mac] = "08:00:27:95:4e:%02d" % (index)
  node[:vbox_natnet] = "10.0.%d/24" % (index + 10)

  node[:sync_type] = SYNC_TYPE
  node[:sync_path] = SYNC_HOST_PATH.gsub(_re) { |m| eval($1).to_s }

  node[:primary] = false
  
  node[:path_to_disk] = node[:name] + "_" + File.basename(Dir.getwd) + "_" + MAPR_VERSION.to_s + "_" + OS + ".img"

  node[:forwarded_port] = PORT_FORWARDING.select { |rule| rule[:instance] == index }

  node
end

ENABLED_NODES = NODES.select { |node| !node[:skip] }
ENABLED_NODES[0][:primary] = true
PRIMARY_HOSTNAME = ENABLED_NODES[0][:name]
ENABLED_HOSTS = ENABLED_NODES.map { |node| node[:name] }
FQDNS = INSTANCES.reduce({}) { |res, node| res.merge(node[:name] => node[:fqdn]) }

# Handle empty MAPR_ECO_VERSION for backward compatibility
core_to_eco = {
  311 => 'ECO3',
  401 => 'ECO4', 402 => 'ECO4', 410 => 'ECO4',
  500 => 'ECO5', 510 => 'ECO5',
  520 => 'MEP11', 521 => 'MEP20', 522 => 'MEP30',
  600 => 'MEP40', 601 => 'MEP50',
  610 => 'MEP60',
  620 => 'MEP61'
}
MAPR_ECO_VERSION_V = MAPR_ECO_VERSION.nil? ? core_to_eco[MAPR_VERSION] : MAPR_ECO_VERSION



# ---- Vagrant configuration ----

Vagrant.configure(2) do |config|
  config.ssh.username = 'mapr'
  config.ssh.insert_key = false
  config.ssh.private_key_path = './ssh/id_rsa.template'
  unless LIBVIRT_HOST.nil?
    config.vm.provider :libvirt do |libvirt|
      libvirt.connect_via_ssh = true
      libvirt.host = LIBVIRT_HOST
      libvirt.username = LIBVIRT_USER
    end
  end

  ENABLED_NODES.each do | node |
    config.vm.define node[:name], primary: node[:primary] do |machine|
      machine.vm.provider "libvirt" do |libvirt, override|
        libvirt.cpus = node[:cpu]
        libvirt.memory = node[:ram]
        libvirt.volume_cache = CACHE_MODE

        override.vm.network "private_network", :mac => node[:mac], :ip => node[:ip], :libvirt__netmask => node[:netmask]
        # In case of public network, use both public and private interfaces
        if node[:net_type] == "public_network"
	  override.vm.network "public_network", :mac => node[:mac], :dev => DEFAULT_INTERFACE
        end

        override.vm.box = BOXES_BASE_URL + BOXES[OS]['libvirt']

        libvirt.storage :file, :size => MAPRFS_DISK_SIZE.to_s + "G", :device => "sdb", :bus => "ide", :type => "qcow2", :cache => CACHE_MODE.to_s, :path => node[:path_to_disk]
      end

      machine.vm.provider "virtualbox" do |virtualbox, override|
        virtualbox.cpus = node[:cpu]
        virtualbox.memory = node[:ram]

        # Hack to fix duplicating IPs in VirtualBox:
        # since VirtualBox always set x.x.x.15 as IP address for NAT interface,
        # we can set different networks for different machines.
        override.vm.base_mac = node[:vbox_mac].gsub(':', '')
        virtualbox.customize ['modifyvm', :id, '--natnet1', node[:vbox_natnet]]

        case node[:net_type]
          when "public_network"
            override.vm.network "public_network", :mac => node[:mac].gsub(':', ''), :bridge => DEFAULT_INTERFACE
          when "private_network"
            override.vm.network "private_network", :mac => node[:mac].gsub(':', ''), :ip => node[:ip], :netmask => node[:netmask]
        end

        override.vm.box = BOXES_BASE_URL + BOXES[OS]['virtualbox']

        vb_path_to_disk = File.join("/vm/mapr", node[:path_to_disk])
        virtualbox.customize ['createhd', '--filename', vb_path_to_disk, '--size', MAPRFS_DISK_SIZE * 1024]
        virtualbox.customize ['storageattach', :id, '--storagectl', 'IDE Controller', '--port', 1, '--device', 0, '--type', 'hdd', '--medium', vb_path_to_disk]
      end

      for rule in node[:forwarded_port] do
        machine.vm.network "forwarded_port", :guest => rule[:guest], :host => rule[:host], :guest_ip => node[:ip], :host_ip => '0.0.0.0'
      end

      machine.vm.synced_folder '.', '/vagrant', disabled: true
      case node[:sync_type]
        when 'rsync'
          machine.vm.synced_folder node[:sync_path], '/_host', create: true, type: 'rsync'
          machine.vm.synced_folder '.', '/vagrant', create: true, type: 'rsync'
        when 'nfs'
          machine.vm.synced_folder node[:sync_path], '/_host', create: true, type: 'nfs'
          machine.vm.synced_folder '.', '/vagrant', create: true, type: 'nfs'
        when 'nfs4'
          machine.vm.synced_folder node[:sync_path], '/_host', create: true, type: 'nfs', nfs_version: 4, nfs_udp: false
          machine.vm.synced_folder '.', '/vagrant', create: true, type: 'nfs', nfs_version: 4, nfs_udp: false
          # NFSv4 not works with UDP, which is enabled in Vagrant for NFS by default
      end

      machine.vm.provision "shell", inline: "mkdir -m 777 -p /mapr-disks && echo '/dev/sdb' > /mapr-disks/disks.list"

      machine.vm.hostname = node[:fqdn]

      etc_hosts = ERB.new(File.read('etc.hosts.erb')).result()
      machine.vm.provision "shell", inline: "echo '#{etc_hosts}' > /etc/hosts"

      machine.vm.provision "ansible" do |ansible|
        ansible.playbook = node[:playbook]
        ansible.verbose = "vv"
        ansible.extra_vars = {
          hostname: node[:name],
          security: SECURITY,
          mapr_version: MAPR_VERSION,
          mapr_eco_version: MAPR_ECO_VERSION_V,
          kerberos_server_host: PRIMARY_HOSTNAME,
          ldap_server_host: PRIMARY_HOSTNAME,
          my_ip: node[:ip],
          use_core_patch: USE_MAPR_CORE_PATCH,
          primary_host: PRIMARY_HOSTNAME,
          is_primary: node[:primary],
          ram: node[:ram],
          cpu: node[:cpu],
          proxy_url: PROXY_URL,
          enabled_hosts: ENABLED_HOSTS,
          fqdns: FQDNS,
        }
      end

    end # machine

  end # HOSTS-each

end # config
